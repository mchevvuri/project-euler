package com.manoj.euler;

/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

import com.manoj.euler.utils.FibonacciUtils;

public class Problem2 {
    public static void main(String[] args) {


        long start = System.nanoTime();
        int limit = 4000000;
        int result = 0;
        int curr = 0;
        for(int i=2; curr < limit ;i=i+3){
            result = result + curr;
            curr = FibonacciUtils.fibonacciNumberForPositionUsingRecursive(i);
         /*
         if we add curr to result after calculating current, then that will lead to a wrong answer, due to number of iterations
         make sure to use value and then change it.
          */
        }
        System.out.println("performance: " + (System.nanoTime() - start));
        System.out.println("result: "+result);
    }
}
